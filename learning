#!./.venv/bin/python

import click, os
from datetime import datetime

os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

# Example
# --------
#
# FILE_SIZE=245,35 SAMPLE_COUNT=100 BATCH_SIZE=128 LABEL_COUNT=100 ./learning env
#
FILE_SIZE = tuple(map(int, os.getenv("FILE_SIZE", "254,254").split(",")))
SAMPLE_COUNT = int(os.getenv("SAMPLE_COUNT", 50))
BATCH_SIZE = int(os.getenv("BATCH_SIZE", 32))
LABEL_COUNT = int(os.getenv("PD_LABEL_COUNT", 5))
EPOCHS = int(os.getenv("EPOCHS", 8))


@click.group()
def cli():
    pass


@click.command()
def env():
    print(type(FILE_SIZE))
    print(f"FILE_SIZE={FILE_SIZE}")
    print(f"SAMPLE_COUNT={SAMPLE_COUNT}")
    print(f"BATCH_SIZE={BATCH_SIZE}")
    print(f"LABEL_COUNT={LABEL_COUNT}")
    print(f"EPOCHS={EPOCHS}")


@click.command()
@click.option("--folder_name", required=True)
@click.option("--model_name", required=True)
@click.option("--architecture", required=False)
def train_folder(folder_name, model_name, architecture="a"):
    """Trains a model in a giving Image Dataset in a folder.
    Images insde the folder must be separated in train, valid
    and test subfolders by desired proportions.
    Images must be separated in subfolders with the name
    of the label.

    Args:
        folder_name (str): Folder with images
        model_name (str): base model name Ex: 'vgg16'
        architecture (str): CNN Architecture to run the training. (a, b or c)
    """
    from source.cnn.project import ImageProject

    if model_name == "all":
        model_name = [
            "vgg16",
            "vgg19",
            "resnet50",
            "efficientNetB1",
            "efficientNetB5",
            "efficientNetB7",
        ]
    else:
        model_name = [model_name]

    if architecture == None:
        architecture = "a"

    project = ImageProject(
        folder_name.split("/")[-1],
        folder_name,
        file_size=FILE_SIZE,
        batch_size=BATCH_SIZE,
        architecture=architecture,
        epochs=EPOCHS,
    )
    for modeln in model_name:
        project.create_model_folder(folder_name.split("/")[-1], architecture, modeln)
    project.train(model_name)


@click.command()
@click.option("--name", required=True)
@click.option("--dataframe_file", required=True)
@click.option("--images_folder", required=True)
@click.option("--model_name", required=True)
@click.option("--architecture", required=False)
def train_dataset(name, dataframe_file, images_folder, model_name, architecture="a"):
    """_summary_

    Example:
    --------
    > ./learning train-dataset \
            --name=mushrooms \
            --dataframe_file=input/old_pd_files/observations_mushroom_pred_manual_cat_filter.csv \
            --images_folder=input/images \
            --model_name=vgg16 \
            --architecture=a

    Args:
        name (_type_): _description_
        dataframe_file (_type_): _description_
        images_folder (_type_): _description_
        model_name (_type_): _description_
        architecture (str, optional): _description_. Defaults to "a".
    """
    from source.cnn.projects.dataset_project import Project
    from source.cnn.image_dataset import ImageDataSet

    if model_name == "all":
        model_name = [
            "vgg16",
            "vgg19",
            "resnet50",
            "efficientNetB1",
            "efficientNetB5",
            "efficientNetB7",
        ]
    else:
        model_name = [model_name]

    if architecture == None:
        architecture = "a"
    dataset = ImageDataSet(
        dataframe_file,
        "image_lien",
        "label_id",
        image_folder=images_folder,
        sample_count=SAMPLE_COUNT,
    )
    dataset.load()
    dataset.find_n_top_labels(LABEL_COUNT)

    project = Project(
        name,
        dataset,
        images_folder,
        file_size=FILE_SIZE,
        batch_size=BATCH_SIZE,
        architecture=architecture,
        epochs=EPOCHS,
    )
    for modeln in model_name:
        project.create_model_folder(name, architecture, modeln)
    project.train(model_name)

    # from dask.distributed import Client, progress
    # import joblib
    # with joblib.parallel_backend("dask"):


@click.command()
@click.option("--folder", required=True)
@click.option("--label_names", required=True)
def render(folder, label_names=None):
    from source.cnn.graphics.classification_report import ClassificationReport
    from source.cnn.graphics.confussion_matrix import ConfusionMatrix
    from source.cnn.graphics.training_history_image import TrainingHistoryImage
    import json

    cr = f"{folder}/classification_report"
    cm = f"{folder}/confusion_matrix"
    history = f"{folder}/history"

    if label_names != None:
        label_names = label_names.split(",")

    with open(f"{cr}.txt") as file:
        data = file.read()
        ClassificationReport(
            data, "EfficientNetB1", label_names=label_names
        ).render().save(f"{cr}.jpg")

    with open(f"{cm}.json") as file:
        data = json.load(file)["matrix"]
        ConfusionMatrix(data, "EfficientNetB1", label_names=label_names).render().save(
            f"{cm}.jpg"
        )

    TrainingHistoryImage(f"{history}.csv").render().save(f"{history}.jpg")


cli.add_command(train_dataset)
cli.add_command(train_folder)
cli.add_command(render)

cli.add_command(env)


if __name__ == "__main__":
    cli()
