#!./.venv/bin/python

import click, os
from datetime import datetime

""" 
    Command Line App that automates the execution of Model 
    trainings based on different parameters

"""

os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

# Example
# --------
#
# FILE_SIZE=245,35 SAMPLE_COUNT=100 BATCH_SIZE=128 LABEL_COUNT=100 ./learning env
#
FILE_SIZE = tuple(map(int, os.getenv("FILE_SIZE", "254,254").split(",")))
SAMPLE_COUNT = int(os.getenv("SAMPLE_COUNT", 50))
BATCH_SIZE = int(os.getenv("BATCH_SIZE", 32))
LABEL_COUNT = int(os.getenv("PD_LABEL_COUNT", 5))
EPOCHS = int(os.getenv("EPOCHS", 8))


@click.group()
def cli():
    pass


@click.command()
@click.option("--folder_name", required=True)
@click.option("--model_name", required=True)
@click.option("--architecture", required=False)
def train_folder(folder_name, model_name, architecture="a"):
    """Trains a model in a giving Image Dataset in a folder.
    Images insde the folder must be separated in train, valid
    and test subfolders by desired proportions.
    Images must be separated in subfolders with the name
    of the label.

    Args:
        folder_name (str): Folder with images
        model_name (str): base model name Ex: 'vgg16'
        architecture (str): CNN Architecture to run the training. (a, b or c)
    """
    from source.cnn.project import ImageProject

    if model_name == "all":
        model_name = [
            "vgg16",
            "vgg19",
            "resnet50",
            "efficientNetB1",
            "efficientNetB5",
            "efficientNetB7",
        ]
    else:
        model_name = [model_name]

    if architecture == None:
        architecture = "a"

    project = ImageProject(
        folder_name.split("/")[-1],
        folder_name,
        file_size=FILE_SIZE,
        batch_size=BATCH_SIZE,
        architecture=architecture,
        epochs=EPOCHS,
    )
    for modeln in model_name:
        project.create_model_folder(folder_name.split("/")[-1], architecture, modeln)
    project.train(model_name)


@click.command()
@click.option("--name", required=True)
@click.option("--dataframe_file", required=True)
@click.option("--images_folder", required=True)
@click.option("--model_name", required=True)
@click.option("--architecture", required=False)
def train_dataset(name, dataframe_file, images_folder, model_name, architecture="a"):
    """_summary_

    Example:
    --------
    > ./learning train-dataset \
            --name=mushrooms \
            --dataframe_file=input/old_pd_files/observations_mushroom_pred_manual_cat_filter.csv \
            --images_folder=input/images \
            --model_name=vgg16 \
            --architecture=a

    Args:
        name (_type_): _description_
        dataframe_file (_type_): _description_
        images_folder (_type_): _description_
        model_name (_type_): _description_
        architecture (str, optional): _description_. Defaults to "a".
    """
    from source.cnn.projects.dataset_project import Project
    from source.cnn.image_dataset import ImageDataSet

    if model_name == "all":
        model_name = [
            "vgg16",
            "vgg19",
            "resnet50",
            "efficientNetB1",
            "efficientNetB5",
            "efficientNetB7",
        ]
    else:
        model_name = [model_name]

    if architecture == None:
        architecture = "a"
    dataset = ImageDataSet(
        dataframe_file,
        "image_lien",
        "label_id",
        image_folder=images_folder,
        sample_count=None,
    )
    dataset.load()
    dataset.find_n_top_labels(LABEL_COUNT)
    # dataset.downsample_to_equal()
    dataset.factorize_labels()

    project = Project(
        name,
        dataset,
        images_folder,
        file_size=FILE_SIZE,
        batch_size=BATCH_SIZE,
        architecture=architecture,
        epochs=EPOCHS,
    )
    for modeln in model_name:
        project.create_model_folder(name, architecture, modeln)
    project.train(model_name)

    # from dask.distributed import Client, progress
    # import joblib
    # with joblib.parallel_backend("dask"):


@click.command()
@click.option("--file_name", required=True)
@click.option("--title", required=False, default="")
@click.option("--label_names", required=False, default="")
@click.option("--figsize", required=False, default="50,50")
def render_report(file_name, title, label_names, figsize):
    """ Renders an image from a Classification Report with configuration params

    Example: Simple Execturion
    > ./learning render-report --file_name=<path_to_file>
            
    Example: With all parameters
    > ./learning render-report \
            --file_name=<path_to_file> \
            --title="Desired Title" \
            --label_names="<Comma,separated,label,names>" \
            --figsize=60,60
            
    Args:
        file_name (str): Classification Report file
        title (str, optional): Image title. Defaults to "".
        label_names (str, optional): Update the Label Names. Defaults to "".
        figsize (str, optional): Desired Figure Size. Defaults to "50,50".
    """
    from source.cnn.graphics.classification_report import ClassificationReport

    # Parsing arguments
    figsize = tuple(map(int, figsize.split(",")))
    if label_names != "":
        label_names = label_names.split(",")
    else:
        label_names = None

    print(f"Reading report from {file_name}")
    with open(file_name) as file:
        file_name_tag = file_name.split(".")[0]
        data = file.read()

        ClassificationReport(data, title, label_names=label_names).render(
            figsize=figsize
        ).save(f"{file_name_tag}.jpg")
        print(f"Saving file to {file_name_tag}.jpg")


@click.command()
@click.option("--file_name", required=True)
@click.option("--title", required=False, default="")
@click.option("--label_names", required=False, default="")
@click.option("--figsize", required=False, default="50,50")
def render_cfn_matrix(file_name, title, label_names, figsize):
    """ Renders an image from a Confussion Matrix JSON file with configuration params

    Example: Simple Execturion
    > ./learning render-history --file_name=<path_to_file>
            
    Example: With all parameters
    > ./learning render-history \
            --file_name=<path_to_file> \
            --title="Desired Title" \
            --label_names="<Comma,separated,label,names>" \
            --figsize=60,60
            
    Args:
        file_name (str): Classification Report file
        title (str, optional): Image title. Defaults to "".
        label_names (str, optional): Update the Label Names. Defaults to "".
        figsize (str, optional): Desired Figure Size. Defaults to "50,50".
    """
    from source.cnn.graphics.confussion_matrix import ConfusionMatrix
    import json

    # Parsing arguments
    figsize = tuple(map(int, figsize.split(",")))
    if label_names != "":
        label_names = label_names.split(",")
    else:
        label_names = None

    print(f"Reading report from {file_name}")
    with open(file_name) as file:
        file_name_tag = file_name.split(".")[0]
        data = json.load(file)["matrix"]
        ConfusionMatrix(data, title, label_names=label_names).render(
            figsize=figsize
        ).save(f"{file_name_tag}.jpg")
        print(f"Saving file to {file_name_tag}.jpg")


@click.command()
@click.option("--file_name", required=True)
@click.option("--title", required=False, default="")
@click.option("--figsize", required=False, default="15,5")
def render_history(file_name, title, figsize):
    """ Renders an image from a Training History file with configuration params

    Example: Simple Execturion
    > ./learning render-history --file_name=<path_to_file>
            
    Example: With all parameters
    > ./learning render-history \
            --file_name=<path_to_file> \
            --title="Desired Title" \
            --figsize=60,60
            
    Args:
        file_name (str): Classification Report file
        title (str, optional): Image title. Defaults to "".
        figsize (str, optional): Desired Figure Size. Defaults to "50,50".
    """
    from source.cnn.graphics.training_history_image import TrainingHistoryImage
    import pandas as pd

    # Parsing arguments
    figsize = tuple(map(int, figsize.split(",")))

    print(f"Reading report from {file_name}")
    file_name_tag = file_name.split(".")[0]
    data = pd.read_csv(file_name)

    TrainingHistoryImage(data, title).render(figsize=figsize).save(
        f"{file_name_tag}.jpg"
    )
    print(f"Saving file to {file_name_tag}.jpg")


@click.command()
@click.option("--dataframe_file", required=True)
@click.option("--images_folder", required=True)
@click.option("--output", required=True)
def image_sampler(dataframe_file, images_folder, output):
    from source.datasets.graphics.random_sampler import RandomSampler
    from source.cnn.image_dataset import ImageDataSet
    from source.cnn.folder_dataset import FolderDataset

    dataset = ImageDataSet(
        dataframe_file,
        "image_lien",
        "label_id",
        image_folder=images_folder,
        sample_count=None,
    )

    dataset.load()
    dataset.find_n_top_labels(LABEL_COUNT)
    dataset.factorize_labels()
    dataset.find_by_shape()

    RandomSampler(dataset).render(figsize=(100, 35)).save(f"{output}/samples2.jpg")


cli.add_command(train_dataset)
cli.add_command(train_folder)

cli.add_command(render_report)
cli.add_command(render_cfn_matrix)
cli.add_command(render_history)

cli.add_command(image_sampler)


if __name__ == "__main__":
    cli()
